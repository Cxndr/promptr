export const baseWordList = [
	"wiggle",
	"bamboozle",
	"marshmallow",
	"zany",
	"flop",
	"gobble",
	"squawk",
	"sizzle",
	"bonkers",
	"giggle",
	"slippery",
	"doodle",
	"jiggle",
	"pudding",
	"wobble",
	"clunky",
	"muggle",
	"splat",
	"goof",
	"snuggle",
	"quack",
	"bumblebee",
	"zipper",
	"flabbergasted",
	"funky",
	"tickle",
	"jellybean",
	"dingbat",
	"smush",
	"wacky",
	"noodle",
	"twinkle",
	"jumble",
	"pipsqueak",
	"wigwam",
	"fizzle",
	"kooky",
	"bloop",
	"boogie",
	"quirky",
	"snazzy",
	"yodel",
	"sprinkle",
	"gooey",
	"scribble",
	"tater",
	"popcorn",
	"bizarre",
	"gigantic",
	"sparkle",
	"chuckle",
	"cluck",
	"blimp",
	"jolly",
	"gurgle",
	"bubble",
	"guffaw",
	"munchkin",
	"whammy",
	"puff",
	"mellow",
	"drizzle",
	"jabber",
	"loopy",
	"fling",
	"fuzzy",
	"swish",
	"blip",
	"goober",
	"bumble",
	"bungle",
	"chomp",
	"kablooey",
	"glop",
	"crinkle",
	"dippy",
	"peppy",
	"burp",
	"zing",
	"floofy",
	"razzle",
	"tattle",
	"fluffy",
	"hoot",
	"gobbledygook",
	"plunge",
	"flap",
	"yucky",
	"crumb",
	"blob",
	"tricky",
	"boggle",
	"twiddle",
	"ticklish",
	"splodge",
	"squirm",
	"chirp",
	"bonanza",
	"fiddle",
	"splash",
	"blabber",
	"rumble",
	"prickle",
	"splatter",
	"splish",
	"zoom",
	"jelly",
	"flop",
	"goofball",
	"fluff",
	"blur",
	"zippy",
	"nudge",
	"gabble",
	"gaggle",
	"twang",
	"shimmy",
	"zip",
	"cheesy",
	"swoop",
	"slink",
	"giddy",
	"hula",
	"whoosh",
	"dizzy",
	"clomp",
	"scrunch",
	"poodle",
	"gurgle",
	"swizzle",
	"dabble",
	"jitterbug",
	"waddle",
	"muddle",
	"flapjack",
	"bubbly",
	"piddle",
	"scramble",
	"pounce",
	"gobstopper",
	"swish",
	"doohickey",
	"fritter",
	"hodgepodge",
	"shamble",
	"tick",
	"plunk",
	"lickety",
	"pumpernickel",
	"loaf",
	"sneak",
	"booger",
	"clammy",
	"zonk",
	"yippee",
	"cackle",
	"oozing",
	"goopy",
	"quibble",
	"humdinger",
	"razz",
	"twaddle",
	"fluff",
	"toodle",
	"chortle",
	"jittery",
	"shmooze",
	"tingle",
	"wiggly",
	"gibber",
	"trundle",
	"wibble",
	"grumble",
	"skedaddle",
	"squeeze",
	"slobber",
	"rattle",
	"sprinkle",
	"curly",
	"piddle",
	"fumble",
	"glitch",
	"blustery",
	"tippy",
	"tizzy",
	"whisk",
	"jangle",
	"frizzle",
	"zappy",
	"scoot",
	"frump",
	"quip",
	"schmaltz",
	"stumble",
	"squabble",
	"nuzzle",
	"buzz",
	"whopper",
	"boink",
	"frumpy",
	"knickknack",
	"floppy",
	"snooze",
	"clatter",
	"pirate",
	"alien",
	"pizza",
	"glitter",
	"dance",
	"cat",
	"robot",
	"sleep",
	"spaceship",
	"lava",
	"nap",
	"shark",
	"volcano",
	"coffee",
	"dog",
	"moon",
	"banana",
	"unicorn",
	"secret",
	"potato",
	"lost",
	"angry",
	"glue",
	"cheese",
	"cake",
	"dinosaur",
	"stinky",
	"time",
	"magic",
	"fart",
	"sleepy",
	"snail",
	"cloud",
	"button",
	"jelly",
	"phone",
	"couch",
	"tired",
	"panic",
	"whisper",
	"noise",
	"chicken",
	"sock",
	"bubbles",
	"dragon",
	"sandwich",
	"juggle",
	"mystery",
	"adventure",
	"tiny",
	"loud",
	"monster",
	"wild",
	"confetti",
	"giraffe",
	"slime",
	"chocolate",
	"parrot",
	"balloon",
	"spaghetti",
	"race",
	"spider",
	"ninja",
	"wizard",
	"explosion",
	"pirate ship",
	"treasure",
	"alarm",
	"frog",
	"castle",
	"cupcake",
	"confused",
	"invisible",
	"boring",
	"fast",
	"sticky",
	"whistle",
	"crayon",
	"pancakes",
	"clumsy",
	"toothbrush",
	"fortune",
	"fish",
	"fork",
	"squishy",
	"cloudy",
	"disco",
	"zombie",
	"rocket",
	"quiet",
	"freeze",
	"train",
	"crocodile",
	"sneeze",
	"pirate hat",
	"squirrel",
	"fluffy",
	"kangaroo",
	"jellyfish",
	"underwear",
	"mud",
	"trampoline",
	"hug",
	"bagel",
	"sparkle",
	"surprise",
	"ice cream",
	"feather",
	"umbrella",
	"waffle",
	"ice",
	"cactus",
	"traffic",
	"bubblegum",
	"confuse",
	"rollercoaster",
	"croissant",
	"burger",
	"clown",
	"lightning",
	"puzzle",
	"popsicle",
	"lobster",
	"screaming",
	"pants",
	"surfboard",
	"candy",
	"penguin",
	"submarine",
	"helicopter",
	"owl",
	"vacuum",
	"beach",
	"donut",
	"cereal",
	"plunger",
	"pirate flag",
	"spacesuit",
	"tornado",
	"yo-yo",
	"butter",
	"mustache",
	"thunder",
	"toast",
	"sunglasses",
	"pillow",
	"superhero",
	"basket",
	"mustard",
	"fireworks",
	"cucumber",
	"snowman",
	"blanket",
	"snowball",
	"sloth",
	"frisbee",
	"beep",
	"grapes",
	"mountain",
	"turkey",
	"pray",
	"smooth",
	"betrayal",
	"rock",
	"require",
	"torment",
	"kingdom",
	"devil",
	"whip",
	"argue",
	"attain",
	"basic",
	"grand",
	"test",
	"behind",
	"show",
	"lucky",
	"oppose",
	"stab",
	"crisis",
	"run",
	"jump",
	"swim",
	"fly",
	"write",
	"read",
	"paint",
	"draw",
	"climb",
	"drive",
	"play",
	"sing",
	"dance",
	"laugh",
	"smile",
	"think",
	"dream",
	"hope",
	"believe",
	"grow",
	"shine",
	"wander",
	"explore",
	"study",
	"learn",
	"teach",
	"share",
	"build",
	"create",
	"invent",
	"cook",
	"bake",
	"ride",
	"travel",
	"plan",
	"organize",
	"listen",
	"hear",
	"see",
	"watch",
	"observe",
	"notice",
	"understand",
	"remember",
	"forget",
	"start",
	"stop",
	"begin",
	"end",
	"continue",
	"try",
	"complete",
	"move",
	"stay",
	"wait",
	"rest",
	"recover",
	"imagine",
	"wish",
	"promise",
	"help",
	"serve",
	"protect",
	"guide",
	"support",
	"care",
	"love",
	"hate",
	"follow",
	"lead",
	"inspire",
	"connect",
	"disconnect",
	"engage",
	"choose",
	"decide",
	"prepare",
	"finish",
	"admit",
	"deny",
	"consider",
	"explain",
	"express",
	"describe",
	"ask",
	"answer",
	"propose",
	"suggest",
	"defend",
	"attack",
	"reach",
	"miss",
	"find",
	"lose",
	"search",
	"discover",
	"provide",
	"receive",
];

export function getXRandomWords(words: string[], amount: number) {
	for (let i = words.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1));
		[words[i], words[j]] = [words[j], words[i]];
	}
	words = words.slice(0, amount);
	return words;
}

export function generateBg(words: string[], theme: string | undefined) {
	words = words.filter((word) => word.length <= 8);

	const svgWidth = 500;
	const svgHeight = 500;
	const gridSize = 70; // spacing between words
	const textRotation = -45;
	const textFontSize = 20;
	let fillColor = "#9494ac";
	if (theme === "light") {
		fillColor = "#9494ac";
	} else {
		fillColor = "#2F2F2F";
	}

	// SVG template
	let svgContent = `
    <svg width="${svgWidth}" height="${svgHeight}" xmlns="http://www.w3.org/2000/svg">
  `;

	const wordsPerRow = Math.floor(svgWidth / gridSize);
	for (let row = 0; row < Math.floor(svgHeight / gridSize); row++) {
		const rowWords = getXRandomWords(words, 20);
		const offset = row % rowWords.length;

		for (let col = 0; col < wordsPerRow; col++) {
			const wordIndex = (col + offset) % rowWords.length;
			const word = rowWords[wordIndex];
			const x = col * gridSize + gridSize / 2;
			const y = row * gridSize + gridSize / 2;

			svgContent += `
        <text x="${x}" y="${y}" font-family="Noto Sans" font-size="${textFontSize}" 
              fill="${fillColor}" text-anchor="middle" transform="rotate(${textRotation}, ${x}, ${y})">
          ${word}
        </text>
      `;
		}
	}

	svgContent += `</svg>`;

	return { svgContent, svgHeight, svgWidth };
}
